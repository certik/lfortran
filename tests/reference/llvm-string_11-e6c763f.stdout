; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [15 x i8] c"This is a test\00", align 1
@1 = private unnamed_addr constant [5 x i8] c"test\00", align 1
@2 = private unnamed_addr constant [2 x i8] c" \00", align 1
@3 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@4 = private unnamed_addr constant [18 x i8] c"test is not found\00", align 1
@5 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@6 = private unnamed_addr constant [2 x i8] c" \00", align 1
@7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@8 = private unnamed_addr constant [25 x i8] c"test is found at index: \00", align 1
@9 = private unnamed_addr constant [9 x i8] c"%s%s%d%s\00", align 1

define i32 @__module_lfortran_intrinsic_string_index(i8** %string_, i8** %substring_, i1* %back, i1* %is_back_present_) {
.entry:
  %found = alloca i1, align 1
  %i = alloca i32, align 4
  %idx = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %len_str = alloca i32, align 4
  %len_sub = alloca i32, align 4
  %pos = alloca i32, align 4
  store i1 true, i1* %found, align 1
  store i32 0, i32* %idx, align 4
  store i32 1, i32* %i, align 4
  %0 = load i8*, i8** %string_, align 8
  %1 = alloca i8*, align 8
  store i8* %0, i8** %1, align 8
  %2 = call i32 @_lfortran_str_len(i8** %1)
  store i32 %2, i32* %len_str, align 4
  %3 = load i8*, i8** %substring_, align 8
  %4 = alloca i8*, align 8
  store i8* %3, i8** %4, align 8
  %5 = call i32 @_lfortran_str_len(i8** %4)
  store i32 %5, i32* %len_sub, align 4
  %6 = load i32, i32* %len_str, align 4
  %7 = load i32, i32* %len_sub, align 4
  %8 = icmp slt i32 %6, %7
  br i1 %8, label %then, label %else

then:                                             ; preds = %.entry
  store i1 false, i1* %found, align 1
  br label %return

unreachable_after_return:                         ; No predecessors!
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %unreachable_after_return
  br label %loop.head

loop.head:                                        ; preds = %ifcont11, %ifcont
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %len_str, align 4
  %11 = icmp slt i32 %9, %10
  %12 = load i1, i1* %found, align 1
  %13 = icmp eq i1 %11, false
  %14 = select i1 %13, i1 %11, i1 %12
  br i1 %14, label %loop.body, label %loop.end12

loop.body:                                        ; preds = %loop.head
  store i32 0, i32* %k, align 4
  store i32 1, i32* %j, align 4
  br label %loop.head1

loop.head1:                                       ; preds = %ifcont5, %loop.body
  %15 = load i32, i32* %j, align 4
  %16 = load i32, i32* %len_sub, align 4
  %17 = icmp sle i32 %15, %16
  %18 = load i1, i1* %found, align 1
  %19 = icmp eq i1 %17, false
  %20 = select i1 %19, i1 %17, i1 %18
  br i1 %20, label %loop.body2, label %loop.end

loop.body2:                                       ; preds = %loop.head1
  %21 = load i32, i32* %i, align 4
  %22 = load i32, i32* %k, align 4
  %23 = add i32 %21, %22
  store i32 %23, i32* %pos, align 4
  %24 = load i32, i32* %pos, align 4
  %25 = load i8*, i8** %string_, align 8
  %26 = call i8* @_lfortran_str_item(i8* %25, i32 %24)
  %27 = load i32, i32* %j, align 4
  %28 = load i8*, i8** %substring_, align 8
  %29 = call i8* @_lfortran_str_item(i8* %28, i32 %27)
  %30 = load i8, i8* %26, align 1
  %31 = load i8, i8* %29, align 1
  %32 = icmp ne i8 %30, %31
  br i1 %32, label %then3, label %else4

then3:                                            ; preds = %loop.body2
  store i1 false, i1* %found, align 1
  br label %ifcont5

else4:                                            ; preds = %loop.body2
  br label %ifcont5

ifcont5:                                          ; preds = %else4, %then3
  %33 = load i32, i32* %k, align 4
  %34 = add i32 %33, 1
  store i32 %34, i32* %k, align 4
  %35 = load i32, i32* %j, align 4
  %36 = add i32 %35, 1
  store i32 %36, i32* %j, align 4
  br label %loop.head1

loop.end:                                         ; preds = %loop.head1
  %37 = load i1, i1* %found, align 1
  br i1 %37, label %then6, label %else10

then6:                                            ; preds = %loop.end
  %38 = load i32, i32* %i, align 4
  store i32 %38, i32* %idx, align 4
  %39 = load i1, i1* %back, align 1
  %40 = icmp eq i1 %39, false
  %41 = xor i1 %39, true
  %42 = xor i1 %41, true
  br i1 %42, label %then7, label %else8

then7:                                            ; preds = %then6
  store i1 true, i1* %found, align 1
  br label %ifcont9

else8:                                            ; preds = %then6
  store i1 false, i1* %found, align 1
  br label %ifcont9

ifcont9:                                          ; preds = %else8, %then7
  br label %ifcont11

else10:                                           ; preds = %loop.end
  store i1 true, i1* %found, align 1
  br label %ifcont11

ifcont11:                                         ; preds = %else10, %ifcont9
  %43 = load i32, i32* %i, align 4
  %44 = add i32 %43, 1
  store i32 %44, i32* %i, align 4
  br label %loop.head

loop.end12:                                       ; preds = %loop.head
  br label %return

return:                                           ; preds = %loop.end12, %then
  %45 = load i32, i32* %idx, align 4
  ret i32 %45
}

declare i32 @_lfortran_str_len(i8**)

declare i8* @_lfortran_str_item(i8*, i32)

define i32 @main(i32 %0, i8** %1) {
.entry:
  %call_arg_value1 = alloca i1, align 1
  %call_arg_value = alloca i1, align 1
  call void @_lpython_set_argv(i32 %0, i8** %1)
  %__libasr_created_variable_ = alloca i1, align 1
  %__libasr_created_variable_1 = alloca i1, align 1
  %mystring = alloca i8*, align 8
  %2 = call i8* (i32, ...) @_lfortran_malloc(i32 31)
  call void (i32, i8*, ...) @_lfortran_string_init(i32 31, i8* %2)
  store i8* %2, i8** %mystring, align 8
  %3 = load i8*, i8** %mystring, align 8
  %teststring = alloca i8*, align 8
  %4 = call i8* (i32, ...) @_lfortran_malloc(i32 11)
  call void (i32, i8*, ...) @_lfortran_string_init(i32 11, i8* %4)
  store i8* %4, i8** %teststring, align 8
  %5 = load i8*, i8** %teststring, align 8
  call void @_lfortran_strcpy(i8** %mystring, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @0, i32 0, i32 0), i8 0)
  call void @_lfortran_strcpy(i8** %teststring, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i32 0, i32 0), i8 0)
  store i1 false, i1* %call_arg_value, align 1
  %6 = call i32 @__module_lfortran_intrinsic_string_index(i8** %mystring, i8** %teststring, i1* %__libasr_created_variable_, i1* %call_arg_value)
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %then, label %else

then:                                             ; preds = %.entry
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @4, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i32 0, i32 0))
  br label %ifcont

else:                                             ; preds = %.entry
  store i1 false, i1* %call_arg_value1, align 1
  %8 = call i32 @__module_lfortran_intrinsic_string_index(i8** %mystring, i8** %teststring, i1* %__libasr_created_variable_1, i1* %call_arg_value1)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @9, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @8, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @6, i32 0, i32 0), i32 %8, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @7, i32 0, i32 0))
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  ret i32 0
}

declare void @_lpython_set_argv(i32, i8**)

declare i8* @_lfortran_malloc(i32, ...)

declare void @_lfortran_string_init(i32, i8*, ...)

declare void @_lfortran_strcpy(i8**, i8*, i8)

declare void @_lfortran_printf(i8*, ...)
